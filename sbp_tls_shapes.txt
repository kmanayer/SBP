(comment "CPSA 3.6.6")
(comment "Extracted shapes")

(herald "Session Binding Protocol (SBP)")

(comment "CPSA 3.6.6")

(comment "All input read from sbp_tls.lsp")

(defprotocol sbp basic
  (defrole client
    (vars (cc id s cred request answer data) (enc_cookie mesg) (p name))
    (trace (send cc) (recv (cat id (pubk p))) (send (enc s (pubk p)))
      (send (enc id (hash s cc id))) (recv (enc cc (hash s cc id)))
      (send (enc "login-request" cred (hash s cc id)))
      (recv (enc "login-success" enc_cookie (hash s cc id)))
      (send (enc "request" request enc_cookie (hash s cc id)))
      (recv (enc (enc "answer" answer (privk p)) (hash s cc id)))))
  (defrole proxy
    (vars (cc id s cred cookie request answer sskey data) (p name))
    (trace (recv cc) (send (cat id (pubk p))) (recv (enc s (pubk p)))
      (send (enc id (hash s cc id))) (recv (enc cc (hash s cc id)))
      (recv (enc "login-request" cred (hash s cc id)))
      (send
        (enc "login-success" (enc cookie (hash sskey (hash s cc id)))
          (hash s cc id)))
      (recv
        (enc "request" request (enc cookie (hash sskey (hash s cc id)))
          (hash s cc id)))
      (send (enc (enc "answer" answer (privk p)) (hash s cc id))))
    (uniq-gen answer)))

(defskeleton sbp
  (vars (enc_cookie mesg) (cc id s cred answer request data) (p name))
  (defstrand client 9 (enc_cookie enc_cookie) (cc cc) (id id) (s s)
    (cred cred) (request request) (answer answer) (p p))
  (non-orig (privk p))
  (uniq-gen cc s)
  (traces
    ((send cc) (recv (cat id (pubk p))) (send (enc s (pubk p)))
      (send (enc id (hash s cc id))) (recv (enc cc (hash s cc id)))
      (send (enc "login-request" cred (hash s cc id)))
      (recv (enc "login-success" enc_cookie (hash s cc id)))
      (send (enc "request" request enc_cookie (hash s cc id)))
      (recv (enc (enc "answer" answer (privk p)) (hash s cc id)))))
  (label 0)
  (unrealized (0 4) (0 6) (0 8))
  (origs)
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton sbp
  (vars (id s answer request cred cookie sskey data) (p name))
  (defstrand client 9
    (enc_cookie (enc cookie (hash sskey (hash s id id)))) (cc id)
    (id id) (s s) (cred cred) (request request) (answer answer) (p p))
  (defstrand proxy 9 (cc id) (id id) (s s) (cred cred) (cookie cookie)
    (request request) (answer answer) (sskey sskey) (p p))
  (precedes ((0 0) (1 0)) ((0 2) (1 2)) ((0 5) (1 5)) ((0 7) (1 7))
    ((1 6) (0 6)) ((1 8) (0 8)))
  (non-orig (privk p))
  (uniq-gen id s answer)
  (operation encryption-test (displaced 2 0 client 8)
    (enc "request" request-0 (enc cookie (hash sskey (hash s id id)))
      (hash s id id)) (1 7))
  (traces
    ((send id) (recv (cat id (pubk p))) (send (enc s (pubk p)))
      (send (enc id (hash s id id))) (recv (enc id (hash s id id)))
      (send (enc "login-request" cred (hash s id id)))
      (recv
        (enc "login-success" (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (send
        (enc "request" request (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (recv (enc (enc "answer" answer (privk p)) (hash s id id))))
    ((recv id) (send (cat id (pubk p))) (recv (enc s (pubk p)))
      (send (enc id (hash s id id))) (recv (enc id (hash s id id)))
      (recv (enc "login-request" cred (hash s id id)))
      (send
        (enc "login-success" (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (recv
        (enc "request" request (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (send (enc (enc "answer" answer (privk p)) (hash s id id)))))
  (label 22)
  (parent 0)
  (unrealized)
  (shape)
  (maps
    ((0)
      ((cc id) (id id) (s s) (cred cred) (answer answer) (p p)
        (request request)
        (enc_cookie (enc cookie (hash sskey (hash s id id)))))))
  (origs))

(defskeleton sbp
  (vars (id s cred answer request cookie sskey data) (p name))
  (defstrand client 9
    (enc_cookie (enc cookie (hash sskey (hash s id id)))) (cc id)
    (id id) (s s) (cred cred) (request request) (answer answer) (p p))
  (defstrand proxy 7 (cc id) (id id) (s s) (cred cred) (cookie cookie)
    (sskey sskey) (p p))
  (defstrand proxy 9 (cc id) (id id) (s s) (cred cred) (cookie cookie)
    (request request) (answer answer) (sskey sskey) (p p))
  (precedes ((0 0) (1 0)) ((0 0) (2 0)) ((0 2) (1 2)) ((0 2) (2 2))
    ((0 5) (1 5)) ((0 5) (2 5)) ((0 7) (2 7)) ((1 6) (0 6))
    ((2 8) (0 8)))
  (non-orig (privk p))
  (uniq-gen id s answer)
  (operation encryption-test (displaced 3 0 client 8)
    (enc "request" request-0
      (enc cookie-0 (hash sskey-0 (hash s id id))) (hash s id id))
    (2 7))
  (traces
    ((send id) (recv (cat id (pubk p))) (send (enc s (pubk p)))
      (send (enc id (hash s id id))) (recv (enc id (hash s id id)))
      (send (enc "login-request" cred (hash s id id)))
      (recv
        (enc "login-success" (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (send
        (enc "request" request (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (recv (enc (enc "answer" answer (privk p)) (hash s id id))))
    ((recv id) (send (cat id (pubk p))) (recv (enc s (pubk p)))
      (send (enc id (hash s id id))) (recv (enc id (hash s id id)))
      (recv (enc "login-request" cred (hash s id id)))
      (send
        (enc "login-success" (enc cookie (hash sskey (hash s id id)))
          (hash s id id))))
    ((recv id) (send (cat id (pubk p))) (recv (enc s (pubk p)))
      (send (enc id (hash s id id))) (recv (enc id (hash s id id)))
      (recv (enc "login-request" cred (hash s id id)))
      (send
        (enc "login-success" (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (recv
        (enc "request" request (enc cookie (hash sskey (hash s id id)))
          (hash s id id)))
      (send (enc (enc "answer" answer (privk p)) (hash s id id)))))
  (label 35)
  (parent 0)
  (unrealized)
  (shape)
  (maps
    ((0)
      ((cc id) (id id) (s s) (cred cred) (answer answer) (p p)
        (request request)
        (enc_cookie (enc cookie (hash sskey (hash s id id)))))))
  (origs))

(comment "Step limit exceeded--aborting run")
