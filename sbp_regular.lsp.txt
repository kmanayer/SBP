;;(defconstant tlskey (ltk client proxy)) - try using long term keys after we get it working
;; one idea is to router all malicious traffic through client via rogue browser plugin
;; another idea is rogue browser plugin, can they add a root CA?

(herald "Session Binding Protocol (SBP)" )

(defprotocol sbp basic

  (defrole client
    (vars (answer cookie sskey login_info data))
    (trace
      ;; tls handshake with proxy (line 0-10 in diagram) is out of scope
      ;; assume both share a ltk that no other role can guess
      ;; all further communiation passes through SSL connection
      (send login_info)
      (recv (enc cookie sskey)) 
      (send (cat "request" (enc cookie sskey))) ;; but to make this request, you need the tlskey,
      (recv answer ) ;; only clients can trigger release of answer
    )
    
  )
  
  (defrole proxy ;; encryption of cookie and communication with server are out of scope
    (vars (answer cookie sskey login_info data))
    (trace
      (recv login_info)
      (send (enc cookie sskey)) 
      (recv (cat "request" (enc cookie sskey))) ;; but to make this request, you need the tlskey,
      (send answer ) ;; only clients can trigger release of answer
    )
    (uniq-gen answer);; so network has to try to figure it out each time
    ;;(non-orig sskey);; sskey = hash()
  )

)



;; from the perspective of the client, with a listener for the answer
;; it probably will need the proxy cuz proxy has the answer
(defskeleton sbp
  (vars (answer data))
  (defstrandmax client (answer answer))
  ;;(defstrandmax proxy  (answer answer) (c c) (p p))
  ;;(deflistener answer)
)


